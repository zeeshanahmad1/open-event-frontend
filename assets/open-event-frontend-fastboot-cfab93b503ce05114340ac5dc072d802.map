{"version":3,"sources":["app-factory.js","open-event-frontend/initializers/ajax.js","open-event-frontend/initializers/error-handler.js","open-event-frontend/instance-initializers/ember-data-storefront.js","open-event-frontend/instance-initializers/setup-fetch.js"],"names":["define","App","config","default","create","APP","name","initialize","Ember","onerror","err","errorMessage","concat","stack","console","error","applicationInstance","shoebox","lookup","get","storefront","put","created","queries","instance","fastboot","_fetch","setupFastboot"],"mappings":"AAAAA,OAAA,wBAAA,CAAA,0BAAA,0CAAA,SAAAC,EAAAC,GAIA,OAHAD,EAAAA,EAAA,QACAC,EAAAA,EAAA,QAEA,CACAC,QAAA,WACA,OAAAF,EAAAG,OAAAF,EAAAG;;UCNe,CACbC,KAAM,eACNC,WAFa;;MCOA,CACbD,KAAM,gBAENC,WAAY,WACLC,MAAMC,UAETD,MAAMC,QAAU,SAASC,GACvB,IAAMC,EAAY,kFAAAC,OAAqFF,EAAIG,OAASH;AACpHI,QAAQC,MAAMJ;;ACff,SAASJ,EAAWS,GACzB,IAAIC,EAAUD,EACXE,OAAO,oBACPC,IAAI,WAEHC,EAAaJ,EAAoBE,OAAO;AAE5CD,EAAQI,IAAI,wBAAyB,CACnCC,cACE,OAAOF,EAAWD,IAAI,2BAExBI,cACE,OAAOH,EAAWD,IAAI;MAKb,CACbb,KAAM,wBACNC,WAAAA;;;MCPa,CACbD,KAAM,QACNC,WAPF,SAAmCiB,GACjC,IAAMC,EAAWD,EAASN,OAAO,qBACjC,EAAAQ,EAAAC,eAAcF,EAASN,IAAI","file":"open-event-frontend-fastboot.js","sourcesContent":["define('~fastboot/app-factory', ['open-event-frontend/app', 'open-event-frontend/config/environment'], function(App, config) {\n  App = App['default'];\n  config = config['default'];\n\n  return {\n    'default': function() {\n      return App.create(config.APP);\n    }\n  };\n});\n","export default {\n  name: 'ajax-service',\n  initialize() {\n    // noop\n    // This is to override Fastboot's initializer which prevents ember-fetch from working\n    // https://github.com/ember-fastboot/ember-cli-fastboot/blob/master/fastboot/initializers/ajax.js\n  }\n};\n","import Ember from 'ember';\n\n/**\n * Initializer to attach an `onError` hook to your app running in fastboot. It catches any run loop\n * exceptions and other errors and prevents the node process from crashing.\n *\n */\nexport default {\n  name: 'error-handler',\n\n  initialize: function() {\n    if (!Ember.onerror) {\n      // if no onerror handler is defined, define one for fastboot environments\n      Ember.onerror = function(err) {\n        const errorMessage = `There was an error running your app in fastboot. More info about the error: \\n ${err.stack || err}`;\n        console.error(errorMessage);\n      }\n    }\n  }\n};\n","export function initialize(applicationInstance) {\n  let shoebox = applicationInstance\n    .lookup('service:fastboot')\n    .get('shoebox');\n\n  let storefront = applicationInstance.lookup('service:storefront');\n\n  shoebox.put('ember-data-storefront', {\n    get created() {\n      return storefront.get('fastbootShoeboxCreated');\n    },\n    get queries() {\n      return storefront.get('fastbootDataRequests');\n    }\n  });\n}\n\nexport default {\n  name: 'ember-data-storefront',\n  initialize\n};\n","import { setupFastboot } from 'fetch';\n\n/**\n * To allow relative URLs for Fastboot mode, we need the per request information\n * from the fastboot service. Then we save the request from fastboot info.\n * On each fetch with relative url we get host and protocol from it.\n */\nfunction patchFetchForRelativeURLs(instance) {\n  const fastboot = instance.lookup('service:fastboot');\n  setupFastboot(fastboot.get('request'));\n}\n\nexport default {\n  name: 'fetch',\n  initialize: patchFetchForRelativeURLs\n};\n"]}